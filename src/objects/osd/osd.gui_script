local druid = require "druid.druid"
local monarch = require "monarch.monarch"
local transitions = require "monarch.transitions.gui"
local msgs = require "main.messages"
local data = require "main.data"

local function speed_callback()
	msg.post("/fan", "toggle_speed")
end

local function cut_callback()
	msg.post("guillotine", "drop")
end

function create_life_node(self)
	local pos = vmath.vector3(64, 64, 0)
	local node = gui.new_box_node(pos, vmath.vector3(60, 60, 0))
	local fx_node = gui.new_particlefx_node(pos, "splash")
	gui.set_id(fx_node, "particlefx")
	gui.set_layer(fx_node, "graphics")
	gui.set_layer(node, "graphics")
	gui.set_id(node, "life_")
	gui.set_texture(node, "bg")
	gui.play_flipbook(node, "hp", nil, { offset = data.player.lives / data.player.total_lives, playback_rate = 5 })
	self.lives = node
end

local function setup_transitions(self)
	self.transition = transitions.create(gui.get_node("cover"))
	.show_in(transitions.scale_out, gui.EASING_OUTCIRC, 0.7, 0)
	.show_out(transitions.scale_in, gui.EASING_INCIRC, 0.7, 0)
end

function init(self)
	self.hover = nil
	self.lives = nil
	gui.set_text(gui.get_node("level"), "level "..data.player.current_level)
	create_life_node(self)
	setup_transitions(self)
	gui.set_text(gui.get_node("score"), "CURRENT SCORE: "..data.player.score)

	self.druid = druid.new(self)
	local a = self.druid:new_button("button_a", speed_callback):set_key_trigger("key_z")
	a.hover.on_mouse_hover:subscribe(function(_, state) self.hover = state end)

	local b = self.druid:new_button("button_b", cut_callback):set_key_trigger("key_x")
	b.hover.on_mouse_hover:subscribe(function(_, state) self.hover = state end)
end

function on_message(self, message_id, message, sender)
	if message_id == msgs.UPDATE_SCORE then
		local node = gui.get_node("score")
		gui.set_text(node, "CURRENT SCORE: "..message.score)
	elseif message_id == msgs.REMOVE_LIFE then
		if self.lives then
			gui.play_flipbook(self.lives, "hp", nil, { offset = data.player.lives / data.player.total_lives, playback_rate = 0 })
			gui.play_particlefx(gui.get_node("particlefx")) 
		end
	end
	self.transition.handle(message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	if action.released and sys.get_engine_info().is_debug then
		if action_id == msgs.KEY_F1 then
			msg.post("@system:", "toggle_physics_debug")
		elseif action_id == msgs.KEY_F2 then
			msg.post("@system:", "toggle_profile")
		end
	end
	if action_id == msgs.KEY_MOUSE_1 and not self.hover and action.released then
		cut_callback()
	elseif action_id == msgs.KEY_MOUSE_2 and not self.hover and action.released then
		speed_callback()
	elseif action_id == msgs.KEY_ESC and action.released then
		monarch.show("pause")
		sound.pause("main:/sounds", true)
	end
	return self.druid:on_input(action_id, action)
end

function final(self)
	self.druid:final()
end