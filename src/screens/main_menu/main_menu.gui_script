local druid = require "druid.druid"
local default_style = require "druid.styles.default.style"
local monarch = require "monarch.monarch"
local data = require "main.data"

local function copy(obj, seen)
	if type(obj) ~= 'table' then return obj end
	if seen and seen[obj] then return seen[obj] end
	local s = seen or {}
	local res = setmetatable({}, getmetatable(obj))
	s[obj] = res
	for k, v in pairs(obj) do res[copy(k, s)] = copy(v, s) end
	return res
end

local function play_callback()
	monarch.show("level_1")
end

local function exit_callabck()
	sys.exit(0)
end

local function credits_callback()
	monarch.show("credits")
end

local function options_callback()
	monarch.show("options")
end

local function continue_callback()
	monarch.show("level_"..data.player.current_level)
end

local function logo_callback()
	sys.open_url("https://defold.com", { target = "_blank" })
end

local function setup_continue(self)
	local my_style = copy(default_style)
	my_style["button"]["ENABLED_COLOR"] = vmath.vector4(0, 1, 0, 1)
	local is_enabled = data.player.current_level > 1
	local continue_node = self.druid:new_button("continue", continue_callback):set_enabled(is_enabled)
	gui.set_enabled(continue_node.node, is_enabled)
	continue_node:set_style(my_style)
end

local function setup_highscore()
	local hs_node = gui.get_node("highscore")
	local highscore = data.player.highscore
	gui.set_enabled(hs_node, highscore > 0)

	if highscore > 0 then
		gui.set_text(hs_node, "HIGHSCORE: "..highscore)
	end
end

function init(self)
	self.druid = druid.new(self)
	druid.set_sound_function(function(name)
		sound.play("main:/sounds#" .. name)
	end)
	self.druid:new_button("play", play_callback):set_key_trigger("key_1")
	self.druid:new_button("credits", credits_callback):set_key_trigger("key_2")
	self.druid:new_button("options", options_callback):set_key_trigger("key_3")
	self.druid:new_button("logo", logo_callback)
	local exit = self.druid:new_button("exit", exit_callabck):set_key_trigger("key_4"):set_enabled(sys.get_sys_info().system_name ~= "HTML5")
	setup_highscore()
	setup_continue(self)
end

function final(self)
	self.druid:final()
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end