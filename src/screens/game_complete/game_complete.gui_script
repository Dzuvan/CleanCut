local druid = require "druid.druid"
local monarch = require "monarch.monarch"
local data = require "main.data"
local defsave =  require "defsave.defsave" 

local function play_again_callback(self)
    data.player.current_level = 1
    data.player.score = 0
    defsave.set("player", "current_level", 1)
    defsave.set("player", "score", 0)
    monarch.show("level_1", { clear = true, sequential = true })
end

local function exit_button_callback()
    sys.exit(0)
end

local function main_menu_callback()
    monarch.show("main_menu", { clear = true })
end

local function setup_score()
    local node = gui.get_node("score")
    gui.set_text(node, "Your score is\n "..data.player.score)
end

local function create_new_highscore_prompt()
    local pos = gui.get_position(gui.get_node("score"))
    pos.y = pos.y + 64
    local node = gui.new_text_node(pos, "NEW HIGHSCORE!")
    gui.set_scale(node, vmath.vector3(0.5, 0.5, 0.5))
    gui.animate(node, gui.PROP_COLOR, vmath.vector4(0, 0, 0, 0), gui.EASING_INCIRC, 1.5, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
end

function init(self)
    setup_score()
    local temp = 0
    if data.player.score > data.player.highscore then 
        data.player.highscore = data.player.score
        temp = data.player.highscore
        defsave.set("player", "highscore", data.player.highscore)
        create_new_highscore_prompt()
    end
    data.player = data.copy_table(data.default.player)
    data.player.highscore = temp
    self.druid = druid.new(self)
    self.druid:new_button("play_again", play_again_callback)
    self.druid:new_button("exit", exit_button_callback):set_enabled(sys.get_sys_info().system_name ~= "HTML5")
    self.druid:new_button("main_menu", main_menu_callback)
end

function final(self)
    for k, _ in pairs(data.player) do 
        defsave.set("player", k, data.default.player[k])
    end
    self.druid:final()
end

function on_message(self, message_id, message, sender)
    self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
    return self.druid:on_input(action_id, action)
end